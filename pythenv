#!/bin/bash

# Description:
# Ce script permet de cr√©er rapidement un environnement de d√©veloppement Python
# avec une structure de projet standardis√©e incluant un environnement virtuel,
# des dossiers pour les notebooks, les applications Streamlit et autres apps.
#
# Auteur: Fx NION
# GitHub: https://github.com/FxNion
#
# Derni√®re modification: 2024-01-09
# Mod√®le LLM: Claude-3.5-Sonnet
# 
# Prompt de g√©n√©ration:
# "Cr√©er un script bash robuste pour configurer un environnement de d√©veloppement Python complet.
#
# Sp√©cifications g√©n√©rales :
# 1. Gestion de l'environnement virtuel :
#    - Cr√©ation et activation automatique d'un environnement Python d√©di√©
#    - Mise √† jour automatique de pip et installation des d√©pendances
#    - Gestion des liens symboliques pour faciliter l'acc√®s
#
# 2. Structure du projet :
#    - Arborescence standardis√©e avec dossiers d√©di√©s :
#      * /notebooks : Pour les Jupyter notebooks
#      * /streamlit : Applications Streamlit
#      * /apps : Applications CLI et utilitaires
#      * /flask : Applications web Flask
#      * /fastapi : APIs avec FastAPI
#    - Fichiers exemples pour chaque type d'application
#    - Gestion du requirements.txt avec versions sp√©cifi√©es
#
# 3. V√©rification et validation :
#    - Contr√¥le des pr√©requis (Python3, VS Code)
#    - V√©rification exhaustive de la configuration existante
#    - Validation de la structure des dossiers et fichiers
#    - Contr√¥le des liens symboliques
#
# 4. Interface utilisateur :
#    - Retours visuels avec spinners pour les op√©rations longues
#    - Messages color√©s et √©mojis pour une meilleure lisibilit√©
#    - Affichage en temps r√©el de la progression
#    - Gestion des erreurs avec messages explicites
#
# 5. Fonctionnalit√©s avanc√©es :
#    - Support des chemins absolus et relatifs
#    - Proposition d'ajout au PATH syst√®me
#    - Int√©gration automatique avec VS Code
#    - Gestion des cas o√π le projet existe d√©j√†
#
# Organisation du code :
# - Fonctions utilitaires pour l'affichage et la gestion des erreurs
# - Proc√©dures distinctes pour la cr√©ation et la v√©rification
# - S√©paration claire entre la logique de cr√©ation et de validation
# - Gestion modulaire des fichiers exemples
#
# Comportement attendu :
# 1. Si le dossier n'existe pas :
#    - Cr√©ation compl√®te de la structure
#    - Installation de l'environnement virtuel
#    - G√©n√©ration des fichiers exemples
#
# 2. Si le dossier existe :
#    - V√©rification exhaustive de la configuration
#    - Validation de chaque composant
#    - Activation de l'environnement si valide"

# Couleurs ANSI
GREEN="\033[0;32m"
BLUE="\033[0;34m"
NC="\033[0m" # No Color
SPINNER=("‚†ã" "‚†ô" "‚†π" "‚†∏" "‚†º" "‚†¥" "‚†¶" "‚†ß" "‚†á" "‚†è")

# Fonction pour afficher un message de succ√®s
show_success() {
    echo -e "${GREEN}$1${NC}"
}

# Fonction pour afficher une notification
show_notification() {
    echo -e "${BLUE}$1${NC}"
}

# Fonction pour afficher les messages d'erreur
show_error() {
    echo -e "\033[0;31mErreur: $1\033[0m" >&2
    exit 1
}

# Fonction pour afficher le spinner avec le message
show_spinner() {
    local pid=$1
    local message=$2
    local i=0
    printf "\r"  # Retour au d√©but de la ligne
    while kill -0 $pid 2>/dev/null; do
        printf "\r${BLUE}${SPINNER[$i]} %s${NC}\033[K" "$message"
        i=$(( (i + 1) % 10 ))
        sleep 0.1
    done
    wait $pid
    local exit_status=$?
    if [ $exit_status -eq 0 ]; then
        printf "\r${GREEN}‚úì %s${NC}\033[K\n" "$message"
    else
        return $exit_status
    fi
}

# V√©rification des pr√©requis
show_notification "üîç V√©rification des pr√©requis..."
(command -v python3 >/dev/null 2>&1) || show_error "Python3 n'est pas install√©"
(command -v code >/dev/null 2>&1) || show_error "Visual Studio Code n'est pas install√©"
show_success "‚úì Pr√©requis valid√©s"

# V√©rification des param√®tres
PROJET="$1"

if [ -z "$PROJET" ]; then
    show_error "Usage: pythenv <nom_projet>"
fi
if [[ ! "$PROJET" = /* ]]; then
    PROJET="$(pwd)/$PROJET"
fi

# V√©rification si le projet existe d√©j√† avec la configuration attendue
show_notification "üîç V√©rification de la configuration existante..."

# V√©rification du dossier principal
if [ ! -d "$PROJET" ]; then
    show_success "‚úì Cr√©ation d'un nouveau projet"
    # Cr√©ation d'un nouveau projet
    show_notification "üìÅ Cr√©ation de la structure du projet..."
    (mkdir -p "$PROJET") || show_error "Impossible de cr√©er le dossier $PROJET"
    (cd "$PROJET") || show_error "Impossible d'acc√©der au dossier $PROJET"
    echo -e "${GREEN}‚úì Structure du projet cr√©√©e${NC}"
else
    # Si le dossier existe, on v√©rifie la configuration compl√®te
    echo -e "${BLUE}üîç V√©rification d√©taill√©e de la configuration existante...${NC}"
    
    # V√©rification de l'environnement virtuel
    if [ ! -d "$PROJET/$(basename "$PROJET")-venv" ]; then
        show_error "Environnement virtuel manquant"
    fi
    show_success "‚úì Environnement virtuel trouv√©"
    
    # V√©rification des dossiers requis
    if [ ! -d "$PROJET/notebooks" ]; then
        show_error "Dossier notebooks manquant"
    fi
    show_success "‚úì Dossier notebooks pr√©sent"
    
    if [ ! -d "$PROJET/streamlit" ]; then
        show_error "Dossier streamlit manquant"
    fi
    show_success "‚úì Dossier streamlit pr√©sent"
    
    if [ ! -d "$PROJET/apps" ]; then
        show_error "Dossier apps manquant"
    fi
    if [ ! -f "$PROJET/apps/cli_example.py" ]; then
        show_error "Fichier cli_example.py manquant"
    fi
    show_success "‚úì Dossier apps et CLI example pr√©sents"
    
    if [ ! -d "$PROJET/flask" ]; then
        show_error "Dossier flask manquant"
    fi
    show_success "‚úì Dossier flask pr√©sent"
    
    if [ ! -d "$PROJET/fastapi" ]; then
        show_error "Dossier fastapi manquant"
    fi
    show_success "‚úì Dossier fastapi pr√©sent"
    
    # V√©rification du fichier requirements.txt
    if [ ! -f "$PROJET/requirements.txt" ]; then
        show_error "Fichier requirements.txt manquant"
    fi
    show_success "‚úì Fichier requirements.txt pr√©sent"
    
    # V√©rification du lien symbolique venv
    if [ ! -L "$PROJET/venv" ] || [ "$(readlink "$PROJET/venv")" != "$(basename "$PROJET")-venv" ]; then
        show_error "Lien symbolique venv mal configur√© ou manquant"
    fi
    show_success "‚úì Lien symbolique venv correctement configur√©"
    
    show_success "‚úì Configuration existante enti√®rement valid√©e"
    cd "$PROJET" || show_error "Impossible d'acc√©der au dossier $PROJET"
    show_notification "üîå Activation de l'environnement virtuel..."
    source "$(basename "$PROJET")-venv/bin/activate" && show_success "‚úì Environnement virtuel activ√©"
    show_success "‚ú® Lancement de VS Code..."
    code .
    exit 0
fi

# Cr√©ation d'un nouveau projet
show_notification "üîß Cr√©ation de l'environnement virtuel..."
(python3 -m venv "$PROJET/$(basename "$PROJET")-venv") & show_spinner $! "Configuration de l'environnement Python"

# Mise √† jour de pip et installation des d√©pendances
show_notification "üì¶ Mise √† jour de pip et installation des d√©pendances..."
("$PROJET/$(basename "$PROJET")-venv/bin/python3" -m pip install --upgrade pip >/dev/null 2>&1 && \
"$PROJET/$(basename "$PROJET")-venv/bin/python3" -m pip install -r "$PROJET/requirements.txt" >/dev/null 2>&1) & show_spinner $! "Installation des d√©pendances"

# Cr√©ation des dossiers requis
show_notification "üìÇ Cr√©ation des dossiers du projet..."
(cd "$PROJET" && mkdir -p notebooks streamlit apps flask fastapi && cat > requirements.txt << 'EOL'
flask==3.0.0
fastapi==0.109.0
uvicorn==0.27.0
streamlit==1.31.0
EOL
ln -s "$(basename "$PROJET")-venv" venv) & show_spinner $! "Cr√©ation des dossiers et fichiers du projet"
show_success "‚úì Structure du projet cr√©√©e"

# Fonctions pour la cr√©ation des fichiers d'exemple

create_cli_example() {
    local PROJET=$1
    cat > "$PROJET/apps/cli_example.py" << 'EOL'
#!/usr/bin/env python3
import argparse

def main():
    parser = argparse.ArgumentParser(description='Example CLI application')
    parser.add_argument('--verbose', action='store_true', help='Afficher des messages d√©taill√©s')
    parser.add_argument('-n', '--name', default='World', help='Nom √† utiliser dans le message')
    
    args = parser.parse_args()
    
    if args.verbose:
        print(f'Mode verbose activ√©')
        print(f'Nom fourni: {args.name}')
    
    print(f'Hello, {args.name}!')

if __name__ == '__main__':
    main()
EOL
    chmod +x "$PROJET/apps/cli_example.py"
}

create_notebook_example() {
    local PROJET=$1
    cat > "$PROJET/notebooks/exemple.ipynb" << 'EOL'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# üìä Notebook de D√©monstration\n",
    "\n",
    "Ce notebook montre les fonctionnalit√©s de base de Jupyter avec Python, notamment :\n",
    "- Manipulation de donn√©es avec Pandas\n",
    "- Calculs num√©riques avec NumPy\n",
    "- Visualisation de donn√©es\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Cr√©ation d'un DataFrame d'exemple\n",
    "np.random.seed(42)\n",
    "dates = pd.date_range(start='2024-01-01', periods=10, freq='D')\n",
    "data = {\n",
    "    'Temperature': np.random.normal(20, 5, 10),\n",
    "    'Humidite': np.random.uniform(60, 90, 10),\n",
    "    'Pression': np.random.normal(1013, 5, 10)\n",
    "}\n",
    "df = pd.DataFrame(data, index=dates)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìà Visualisation des donn√©es\n",
    "\n",
    "Cr√©ons quelques graphiques pour visualiser nos donn√©es m√©t√©orologiques."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cr√©ation d'un graphique multiple\n",
    "fig, axes = plt.subplots(3, 1, figsize=(10, 12))\n",
    "fig.suptitle('Donn√©es M√©t√©orologiques')\n",
    "\n",
    "# Temp√©rature\n",
    "df['Temperature'].plot(ax=axes[0], marker='o')\n",
    "axes[0].set_title('Temp√©rature')\n",
    "axes[0].set_ylabel('¬∞C')\n",
    "\n",
    "# Humidit√©\n",
    "df['Humidite'].plot(ax=axes[1], marker='s', color='green')\n",
    "axes[1].set_title('Humidit√©')\n",
    "axes[1].set_ylabel('%')\n",
    "\n",
    "# Pression\n",
    "df['Pression'].plot(ax=axes[2], marker='^', color='red')\n",
    "axes[2].set_title('Pression')\n",
    "axes[2].set_ylabel('hPa')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìä Analyse statistique\n",
    "\n",
    "Calculons quelques statistiques descriptives sur nos donn√©es."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Statistiques descriptives\n",
    "df.describe()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 }
}
EOL
}

create_flask_example() {
    local PROJET=$1
    cat > "$PROJET/flask/app.py" << 'EOL'
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run(debug=True)
EOL
}

create_fastapi_example() {
    local PROJET=$1
    cat > "$PROJET/fastapi/main.py" << 'EOL'
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def hello():
    return {"message": "Hello, World!"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOL
}

create_streamlit_example() {
    local PROJET=$1
    cat > "$PROJET/streamlit/app.py" << 'EOL'
import streamlit as st

st.title("Hello, World!")
st.write("Bienvenue sur votre application Streamlit !")
EOL
}

# Cr√©ation des fichiers exemples
show_notification "üìù Cr√©ation des fichiers exemples..."
create_notebook_example "$PROJET"
create_flask_example "$PROJET"
create_fastapi_example "$PROJET"
create_streamlit_example "$PROJET"
create_cli_example "$PROJET"
show_success "‚úì Fichiers exemples cr√©√©s"

# Cr√©ation de l'environnement virtuel
show_notification "üîß Cr√©ation de l'environnement virtuel..."
(python3 -m venv "$PROJET/$(basename "$PROJET")-venv") & show_spinner $! "Configuration de l'environnement Python"

# Activation de l'environnement virtuel
show_notification "üîå Activation de l'environnement virtuel..."
source "$PROJET/$(basename "$PROJET")-venv/bin/activate" && show_success "‚úì Environnement virtuel activ√©"

# Mise √† jour de pip et installation des d√©pendances
show_notification "üì¶ Mise √† jour de pip et installation des d√©pendances..."
(pip install --upgrade pip >/dev/null 2>&1 && \
pip install -r "$PROJET/requirements.txt" >/dev/null 2>&1) & show_spinner $! "Installation des d√©pendances"

# Cr√©ation des dossiers requis
show_notification "üìÇ Cr√©ation des dossiers du projet..."
(cd "$PROJET" && mkdir -p notebooks streamlit apps flask fastapi && touch requirements.txt && ln -s "$(basename "$PROJET")-venv" venv) & show_spinner $! "Cr√©ation des dossiers et fichiers du projet"

# V√©rification si c'est la premi√®re ex√©cution
PROFILE_FILE="$HOME/.profile"
SCRIPT_PATH="$(cd "$(dirname "$0")" && pwd)/$(basename "$0")"

if ! grep -q "# Ajout du script pythenv au PATH" "$PROFILE_FILE" 2>/dev/null; then
    show_notification "‚öôÔ∏è  Configuration du PATH"
    echo -n "Voulez-vous ajouter ce script au PATH ? (oui/non) : "
    read -r reponse
    if [ "$(echo "$reponse" | tr '[:upper:]' '[:lower:]')" = "oui" ]; then
        echo "\n# Ajout du script pythenv au PATH" >> "$PROFILE_FILE"
        echo "export PATH=\"$(dirname "$SCRIPT_PATH"):\$PATH\"" >> "$PROFILE_FILE"
        show_success "‚úì Le script a √©t√© ajout√© au PATH. Les changements seront effectifs √† la prochaine connexion."
    fi
fi

# Activation de l'environnement virtuel
show_notification "üîå Activation de l'environnement virtuel..."
source "$PROJET/$(basename "$PROJET")-venv/bin/activate" && show_success "‚úì Environnement virtuel activ√©"

# Lancement de VS Code
show_success "‚ú® Projet cr√©√© avec succ√®s ! Lancement de VS Code..."
code "$PROJET"